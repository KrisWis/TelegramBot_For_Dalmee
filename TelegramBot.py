from aiogram.types import Message, CallbackQuery
import logging.handlers
import logging
import os
import aiogram
from aiogram.utils import executor
import dotenv
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import googleapiclient.discovery

channel_id = "UChMN4C4ZLFfr313x2KZRCbg"

youtube = googleapiclient.discovery.build(
    "youtube", "v3", developerKey="AIzaSyAskIzatMxeTKd-Y1jcyViO4XZcoczXvfk")


async def playlist_keyboard_creating():

    request = youtube.playlists().list(
        part="snippet",
        channelId=channel_id,
        maxResults=50
    )
    response = request.execute()

    playlists = []
    while request is not None:
        response = request.execute()
        playlists += [{"playlist_name": i["snippet"]["title"],
                       "playlist_id": i["id"]} for i in response["items"]]
        request = youtube.playlists().list_next(request, response)

    playlists_keyboard = InlineKeyboardMarkup()
    for i in playlists:
        playlist_id = i["playlist_id"]

        playlists_keyboard.add(InlineKeyboardButton(
            text=i["playlist_name"],
            callback_data=f"playlist_{playlist_id}"
        ))

    return playlists_keyboard


async def videos_keyboard_creating(playlist_id):

    request = youtube.playlistItems().list(
        part="snippet",
        playlistId=playlist_id,
        maxResults=50
    )

    response = request.execute()

    playlist_items = []
    while request is not None:
        response = request.execute()
        playlist_items += [{"video_name": i["snippet"]["title"], "video_url": f"https://www.youtube.com/watch?v={i['snippet']['resourceId']['videoId']}&list={playlist_id}"}
                           for i in response["items"]]  # "video_image": i["snippet"]["thumbnails"]["high"]["url"]
        request = youtube.playlistItems().list_next(request, response)

    videos_keyboard = InlineKeyboardMarkup()
    for i in playlist_items:

        videos_keyboard.add(InlineKeyboardButton(
            text=i["video_name"],
            url=i["video_url"]
        ))

    videos_keyboard.add(InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥ üîô",
        callback_data="–ù–∞–∑–∞–¥ üîô"
    ))

    return videos_keyboard


dotenv.load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª .env

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
logger = logging.getLogger(__name__)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("Logs", exist_ok=True)


# C–æ–∑–¥–∞—ë—Ç –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
logging.basicConfig(  # –ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ, —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –±–æ—Ç–∞
    level=logging.INFO,
    format="[%(levelname)-8s %(asctime)s at           %(funcName)s]: %(message)s",
    datefmt="%d.%d.%Y %H:%M:%S",
    handlers=[logging.handlers.RotatingFileHandler("Logs/     TGBot.log", maxBytes=10485760, backupCount=0), logging.StreamHandler()])


# –°–æ–∑–¥–∞—ë–º Telegram –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä:
Bot = aiogram.Bot(os.environ["TOKEN"])
DP = aiogram.Dispatcher(Bot)


# –ö–û–ì–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–ò–®–ï–¢ /start
@DP.message_handler(commands=["start"])
async def start(msg: Message):

    await msg.answer("–ü—Ä–∏–≤–µ—Ç üëã \n –Ø - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —é—Ç—É–±–µ—Ä–∞ Dalmee. –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –Ω–æ–≤—ã—Ö —Ä–æ–ª–∏–∫–æ–≤, –∞ —Ç–∞–∫–∂–µ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!")


@DP.message_handler(commands=["videos"])
async def videos_command_playlistChoice(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –ø–ª–µ–π–ª–∏—Å—Ç:", reply_markup=await playlist_keyboard_creating())


@DP.callback_query_handler()
async def videos_command_videoChoice(call: CallbackQuery):
    if call.data.startswith("playlist_"):
        await call.message.edit_text("–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ —Ç–µ–±—è –≤–∏–¥–µ–æ:", reply_markup=await videos_keyboard_creating(call.data[9:]))

    elif call.data == "–ù–∞–∑–∞–¥ üîô":
        await call.message.edit_text("–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –ø–ª–µ–π–ª–∏—Å—Ç:", reply_markup=await playlist_keyboard_creating())

if __name__ == "__main__":  # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π, –∞ –Ω–µ –∫–∞–∫ –º–æ–¥—É–ª—å
    # –í –∫–æ–Ω—Å–æ–ª–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–æ–∂—ë–Ω –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    executor.start_polling(  # –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        dispatcher=DP,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        # (–¥–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Ö–æ–¥–∏–ª–∏ –¥–æ –±–æ—Ç–∞)
        on_startup=logger.info("–ó–∞–≥—Ä—É–∑–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ!"), skip_updates=True)
    # –ï—Å–ª–∏ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, —Ç–æ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–µ–¥–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
